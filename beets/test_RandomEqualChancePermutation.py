# ********RoostGPT********
"""
Test generated by RoostGPT for test beets using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=_equal_chance_permutation_7e20aadf25
ROOST_METHOD_SIG_HASH=_equal_chance_permutation_3a845a9021

Scenario 1: Testing with a single artist
Details:
  TestName: test_single_artist
  Description: This test is intended to verify that the function works correctly when there's only one artist in the input list.
Execution:
  Arrange: Initialize a list of objects that all have the same 'albumartist' field.
  Act: Invoke the function with the list of objects, and collect the output into a list.
  Assert: Verify that the output list is a permutation of the input list, and that the 'albumartist' field of all objects in the output list is equal to the 'albumartist' field of the input objects.
Validation:
  This test verifies that the function works correctly in the simplest case, where there's only one artist. The function should not modify the input list in this case, other than possibly reordering the objects.

Scenario 2: Testing with multiple artists
Details:
  TestName: test_multiple_artists
  Description: This test is intended to verify that the function works correctly when there are multiple artists in the input list.
Execution:
  Arrange: Initialize a list of objects that have different 'albumartist' fields.
  Act: Invoke the function with the list of objects, and collect the output into a list.
  Assert: Verify that the output list is a permutation of the input list, and that the 'albumartist' fields of the objects in the output list are shuffled compared to the input list.
Validation:
  This test verifies that the function correctly shuffles the objects when there are multiple artists. Each artist should have an equal chance of appearing in any given position in the output list.

Scenario 3: Testing with empty list
Details:
  TestName: test_empty_list
  Description: This test is intended to verify that the function works correctly when the input list is empty.
Execution:
  Arrange: Initialize an empty list.
  Act: Invoke the function with the empty list, and collect the output into a list.
  Assert: Verify that the output list is also empty.
Validation:
  This test verifies that the function handles the edge case of an empty input list correctly. The output in this case should also be an empty list.

Scenario 4: Testing with duplicate objects
Details:
  TestName: test_duplicate_objects
  Description: This test is intended to verify that the function works correctly when the input list contains duplicate objects.
Execution:
  Arrange: Initialize a list of objects that contains duplicates.
  Act: Invoke the function with the list of objects, and collect the output into a list.
  Assert: Verify that the output list is a permutation of the input list, and that each object appears the same number of times in the output list as in the input list.
Validation:
  This test verifies that the function correctly handles duplicate objects. Each duplicate should be treated as a separate object and should have an equal chance of appearing in any given position in the output list.
"""

# ********RoostGPT********
import pytest
import random
from operator import attrgetter
from itertools import groupby
from random import _equal_chance_permutation

class Test_RandomEqualChancePermutation:

    class Artist:
        def __init__(self, albumartist):
            self.albumartist = albumartist

    def test_single_artist(self):
        artist = self.Artist('A')
        input_list = [artist for _ in range(5)]
        output_list = list(_equal_chance_permutation(input_list))
        assert output_list == input_list, "Output and input lists should be identical"
        assert all(obj.albumartist == 'A' for obj in output_list), "All objects should have the same 'albumartist' field"

    def test_multiple_artists(self):
        input_list = [self.Artist(chr(ord('A') + i%5)) for i in range(20)]
        output_list = list(_equal_chance_permutation(input_list))
        assert sorted(output_list, key=attrgetter('albumartist')) == sorted(input_list, key=attrgetter('albumartist')), "Output and input lists should contain the same objects"
        assert any(x.albumartist != y.albumartist for x, y in zip(output_list, input_list)), "Output list should be shuffled"

    def test_empty_list(self):
        input_list = []
        output_list = list(_equal_chance_permutation(input_list))
        assert output_list == [], "Output list should be empty"

    def test_duplicate_objects(self):
        artist1 = self.Artist('A')
        artist2 = self.Artist('B')
        input_list = [artist1, artist1, artist2, artist2]
        output_list = list(_equal_chance_permutation(input_list))
        assert sorted(output_list, key=attrgetter('albumartist')) == sorted(input_list, key=attrgetter('albumartist')), "Output and input lists should contain the same objects"
        assert output_list.count(artist1) == input_list.count(artist1), "Output list should contain the same number of 'artist1' objects"
        assert output_list.count(artist2) == input_list.count(artist2), "Output list should contain the same number of 'artist2' objects"
