# ********RoostGPT********
"""
Test generated by RoostGPT for test beets using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=template_funcs_bacca6d099
ROOST_METHOD_SIG_HASH=template_funcs_c436d87136

Scenario 1: Test to validate the successful retrieval of template functions from plugins
Details:
  TestName: test_successfully_get_template_funcs
  Description: This test is intended to verify if the function template_funcs can successfully retrieve and merge all template functions provided by each plugin.
Execution:
  Arrange: Mock the find_plugins function to return a list of plugins. Each plugin should have a dictionary attribute called template_funcs.
  Act: Invoke the template_funcs function without any parameters.
  Assert: Check if the returned dictionary matches the combined template_funcs dictionaries of all plugins.
Validation:
  Rationalize the importance of the test and the expected result's connection to the function's specifications and business requirements. This test is crucial as the main functionality of the template_funcs function is to aggregate all template functions from plugins. If this functionality is not working as expected, other parts of the application using these template functions might fail.

Scenario 2: Test to validate the behavior of the function when no plugins are available
Details:
  TestName: test_no_plugins_available
  Description: This test checks the behavior of the function when no plugins are available. In this case, the function should return an empty dictionary.
Execution:
  Arrange: Mock the find_plugins function to return an empty list.
  Act: Invoke the template_funcs function without any parameters.
  Assert: Check if the returned dictionary is empty.
Validation:
  The test is essential to ensure that the function can handle situations where no plugins are available. It should be able to return a valid response (an empty dictionary) in such cases, indicating that no template functions are available.

Scenario 3: Test to validate the behavior of the function when a plugin does not provide any template functions
Details:
  TestName: test_plugin_without_template_funcs
  Description: This test checks the behavior of the function when a plugin does not provide any template functions. The function should ignore such plugins and only return template functions provided by other plugins.
Execution:
  Arrange: Mock the find_plugins function to return a list of plugins. Some plugins should not have a template_funcs attribute.
  Act: Invoke the template_funcs function without any parameters.
  Assert: Check if the returned dictionary matches the combined template_funcs dictionaries of plugins that do provide template functions.
Validation:
  This test ensures that the function can properly handle plugins that do not provide any template functions. It should be able to ignore such plugins and continue aggregating template functions from other plugins.
"""

# ********RoostGPT********
import pytest
from unittest.mock import MagicMock
from plugins import template_funcs

class Test_PluginsTemplateFuncs:
    @pytest.fixture
    def mock_find_plugins(self, monkeypatch):
        mock = MagicMock()
        monkeypatch.setattr('plugins.find_plugins', mock)
        return mock

    @pytest.mark.valid
    def test_successfully_get_template_funcs(self, mock_find_plugins):
        mock_find_plugins.return_value = [
            MagicMock(template_funcs={'func1': lambda x: x}),
            MagicMock(template_funcs={'func2': lambda x: x * 2}),
        ]
        result = template_funcs()
        assert result == {'func1': mock_find_plugins.return_value[0].template_funcs['func1'],
                          'func2': mock_find_plugins.return_value[1].template_funcs['func2']}

    @pytest.mark.valid
    def test_no_plugins_available(self, mock_find_plugins):
        mock_find_plugins.return_value = []
        result = template_funcs()
        assert result == {}

    @pytest.mark.valid
    def test_plugin_without_template_funcs(self, mock_find_plugins):
        mock_find_plugins.return_value = [
            MagicMock(template_funcs=None),
            MagicMock(template_funcs={'func1': lambda x: x}),
        ]
        result = template_funcs()
        assert result == {'func1': mock_find_plugins.return_value[1].template_funcs['func1']}
