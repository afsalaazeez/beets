# ********RoostGPT********
"""
Test generated by RoostGPT for test beets using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=track_distance_8a9eea27b9
ROOST_METHOD_SIG_HASH=track_distance_984e1b30b5

Scenario 1: Test if the track_distance function returns a Distance object
Details:
  TestName: test_return_type
  Description: This test is intended to verify if the returned object from the track_distance function is an instance of the Distance class.
Execution:
  Arrange: Initialize a mock item and info object.
  Act: Invoke the track_distance function with the mock item and info object.
  Assert: Check if the returned object is an instance of the Distance class.
Validation:
  It's essential to ensure that the function is returning the expected object type. In this case, it should return a Distance object.

Scenario 2: Test if the track_distance function correctly calls the track_distance method in the plugins
Details:
  TestName: test_plugin_track_distance_invocation
  Description: This test is intended to verify if the track_distance function correctly calls the track_distance method in each plugin.
Execution:
  Arrange: Mock the find_plugins function to return a list of mock plugins. Each mock plugin should have a track_distance method.
  Act: Invoke the track_distance function with a mock item and info object.
  Assert: Check if the track_distance method of each mock plugin was called once with the correct arguments.
Validation:
  The function's main purpose is to use the plugins to calculate the track distance, so it's crucial to ensure that it calls the track_distance method of each plugin correctly.

Scenario 3: Test if the track_distance function correctly updates the Distance object
Details:
  TestName: test_distance_update
  Description: This test is intended to verify if the track_distance function correctly calls the update method of the Distance object with the return value of each plugin's track_distance method.
Execution:
  Arrange: Mock the find_plugins function to return a list of mock plugins. Each mock plugin should have a track_distance method. Also, mock the Distance class and its update method.
  Act: Invoke the track_distance function with a mock item and info object.
  Assert: Check if the update method of the mock Distance object was called once for each plugin, with the correct arguments.
Validation:
  The function is supposed to update the Distance object with the return value of each plugin's track_distance method, so it's important to ensure that it does this correctly.

Scenario 4: Test if the track_distance function handles the case when no plugins are found
Details:
  TestName: test_no_plugins
  Description: This test is intended to verify if the track_distance function correctly handles the case when no plugins are found.
Execution:
  Arrange: Mock the find_plugins function to return an empty list.
  Act: Invoke the track_distance function with a mock item and info object.
  Assert: Check if the returned Distance object is in its initial state (i.e., no updates were made).
Validation:
  The function should be able to handle the case when no plugins are found, and in this case, it should return a Distance object in its initial state.
"""

# ********RoostGPT********
import pytest
from unittest.mock import Mock, patch
from beets.autotag.hooks import Distance
from plugins import track_distance

class Test_PluginsTrackDistance:
    @pytest.mark.valid
    def test_return_type(self):
        mock_item = Mock()
        mock_info = Mock()
        result = track_distance(mock_item, mock_info)
        assert isinstance(result, Distance), 'Returned object is not an instance of Distance'

    @pytest.mark.valid
    @patch('plugins.find_plugins')
    def test_plugin_track_distance_invocation(self, mock_find_plugins):
        mock_plugin = Mock()
        mock_find_plugins.return_value = [mock_plugin]
        mock_item = Mock()
        mock_info = Mock()
        track_distance(mock_item, mock_info)
        mock_plugin.track_distance.assert_called_once_with(mock_item, mock_info)

    @pytest.mark.valid
    @patch('plugins.find_plugins')
    @patch('beets.autotag.hooks.Distance.update')
    def test_distance_update(self, mock_update, mock_find_plugins):
        mock_plugin = Mock()
        mock_find_plugins.return_value = [mock_plugin]
        mock_item = Mock()
        mock_info = Mock()
        track_distance(mock_item, mock_info)
        mock_update.assert_called_once_with(mock_plugin.track_distance.return_value)

    @pytest.mark.valid
    @patch('plugins.find_plugins')
    def test_no_plugins(self, mock_find_plugins):
        mock_find_plugins.return_value = []
        mock_item = Mock()
        mock_info = Mock()
        result = track_distance(mock_item, mock_info)
        assert result.raw_distance == 0, 'Distance object is not in its initial state'
